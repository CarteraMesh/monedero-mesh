use solana_program::pubkey::Pubkey;

pub enum TokenSymbol {
    BONK,
    BSOL,
    ETH,
    FWOG,
    GME,
    JITOSOL,
    JLP,
    JUP,
    JUPSOL,
    MSOL,
    ORE,
    PEPE,
    POPCAT,
    PYUSD,
    SCF,
    SOL,
    USDC,
    USDT,
    WBTC,
    WDOG,
    WIF,
    Other(Pubkey),
}

// Token: Bonk (Bonk)
pub const BONK_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xbc, 0x07, 0xc5, 0x6e, 0x60, 0xad, 0x3d, 0x3f, 0x17, 0x73, 0x82, 0xea, 0xc6, 0x54, 0x8f, 0xba,
    0x1f, 0xd3, 0x2c, 0xfd, 0x90, 0xca, 0x02, 0xb3, 0xe7, 0xcf, 0xa1, 0x85, 0xfd, 0xce, 0x73, 0x98,
]);

// Token: BlazeStake Staked SOL (bSOL) (bSOL)
pub const BSOL_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x08, 0xd2, 0xe9, 0x70, 0xf9, 0x3c, 0x7b, 0x3d, 0x50, 0x19, 0x1e, 0x61, 0x1a, 0xcd, 0x93, 0xaa,
    0x80, 0xa5, 0x46, 0xb4, 0x5e, 0xc9, 0x65, 0xe1, 0x8b, 0x05, 0x87, 0x15, 0x56, 0x99, 0xc8, 0xac,
]);

// Token: Ether (Portal) (ETH)
pub const ETH_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x66, 0xe5, 0x18, 0x8a, 0x13, 0x08, 0xa1, 0xdb, 0x90, 0xb6, 0xd3, 0x1f, 0x3f, 0xbd, 0xca, 0x8c,
    0x3d, 0xf2, 0x67, 0x8c, 0x81, 0x12, 0xdf, 0xdd, 0x3d, 0x19, 0x2c, 0x5a, 0x3c, 0xc4, 0x57, 0xa8,
]);

// Token: FWOG (FWOG)
pub const FWOG_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x87, 0x90, 0xbe, 0x57, 0x84, 0x2c, 0x24, 0x8c, 0x85, 0x74, 0xd9, 0x7a, 0x70, 0x39, 0x77, 0x88,
    0x32, 0x41, 0x7e, 0xdc, 0xaf, 0xc4, 0x6e, 0x6d, 0x2b, 0x04, 0x00, 0x83, 0xfd, 0x2e, 0x87, 0x0f,
]);

// Token: GameStop (GME)
pub const GME_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x75, 0xfa, 0x18, 0x5a, 0xaf, 0xf1, 0xc7, 0x81, 0xb0, 0x72, 0x69, 0xa4, 0xdf, 0xd7, 0x84, 0x9a,
    0xdd, 0x90, 0xa6, 0xdb, 0x20, 0x7b, 0xf6, 0x1c, 0xff, 0x50, 0x6c, 0x9b, 0x3d, 0x52, 0x53, 0x76,
]);

// Token: Jito Staked SOL (JitoSOL)
pub const JITOSOL_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xfc, 0xd1, 0x41, 0xe9, 0x83, 0x2c, 0xaf, 0x10, 0xad, 0x91, 0x74, 0x95, 0xca, 0x0f, 0x27, 0x1b,
    0x5b, 0x29, 0x3c, 0xd4, 0x70, 0x27, 0xea, 0x73, 0x70, 0x07, 0xed, 0x40, 0xeb, 0x39, 0xa0, 0xbd,
]);

// Token: Jupiter Perps (JLP)
pub const JLP_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x10, 0x76, 0x46, 0x9c, 0x10, 0x41, 0xd9, 0xe9, 0xb3, 0x9f, 0xc2, 0xed, 0xe1, 0x13, 0x33, 0x97,
    0x3b, 0x3e, 0x95, 0x73, 0x2a, 0x44, 0x39, 0x20, 0x71, 0x93, 0xa6, 0x1c, 0xc4, 0x10, 0x8d, 0x43,
]);

// Token: Jupiter (JUP)
pub const JUP_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x04, 0x79, 0xd9, 0xc7, 0xcc, 0x10, 0x35, 0xde, 0x72, 0x11, 0xf9, 0x9e, 0xb4, 0x8c, 0x09, 0xd7,
    0x0b, 0x2b, 0xdf, 0x5b, 0xdf, 0x9e, 0x2e, 0x56, 0xb8, 0xa1, 0xfb, 0xb5, 0xa2, 0xea, 0x33, 0x27,
]);

// Token: Jupiter Staked SOL (JupSOL)
pub const JUPSOL_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x0a, 0xfe, 0x1d, 0x91, 0x67, 0x14, 0x22, 0xc7, 0x65, 0xc7, 0xa0, 0x6a, 0x11, 0x39, 0xff, 0x61,
    0x39, 0xd3, 0x80, 0xfc, 0xb4, 0x22, 0xba, 0x78, 0xf7, 0x78, 0xbe, 0xd5, 0x3c, 0x69, 0x7d, 0x81,
]);

// Token: Marinade staked SOL (mSOL) (mSOL)
pub const MSOL_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x0b, 0x62, 0xba, 0x07, 0x4f, 0x72, 0x2c, 0x9d, 0x41, 0x14, 0xf2, 0xd8, 0xf7, 0x0a, 0x00, 0xc6,
    0x60, 0x02, 0x33, 0x7b, 0x9b, 0xf9, 0x0c, 0x87, 0x36, 0x57, 0xa6, 0xd2, 0x01, 0xdb, 0x4c, 0x80,
]);

// Token: ORE (ORE)
pub const ORE_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x0c, 0x00, 0xdb, 0xce, 0xb8, 0xce, 0xaa, 0x73, 0x58, 0x94, 0x5a, 0x47, 0x5b, 0xca, 0x9f, 0x00,
    0x2a, 0xd0, 0xb2, 0xe6, 0xd8, 0xb0, 0x63, 0xc8, 0x25, 0xa8, 0x58, 0x16, 0x43, 0xb9, 0xf5, 0x75,
]);

// Token: Pepe (Pepe)
pub const PEPE_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x95, 0xbc, 0x7f, 0x10, 0xe4, 0x0d, 0x62, 0xcf, 0x7f, 0x44, 0xe9, 0x9d, 0xe1, 0xd0, 0xf5, 0xbd,
    0x52, 0x52, 0x6c, 0xe2, 0xeb, 0x45, 0x96, 0xb2, 0x05, 0xc4, 0xd8, 0xfa, 0x6a, 0xa7, 0x49, 0xe4,
]);

// Token: Popcat (POPCAT)
pub const POPCAT_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x5d, 0x0b, 0x15, 0x9a, 0xff, 0xcb, 0xcc, 0xf1, 0x65, 0xc0, 0x9b, 0xc2, 0xf5, 0xd4, 0xba, 0xfb,
    0x4a, 0xa6, 0x34, 0x5a, 0xf7, 0x93, 0xb9, 0xb3, 0x22, 0x2d, 0xaa, 0x40, 0x29, 0x3a, 0x95, 0x0d,
]);

// Token: PayPal USD (PYUSD)
pub const PYUSD_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x17, 0x92, 0x48, 0x3b, 0x6c, 0x8a, 0x2a, 0x87, 0xb7, 0x47, 0x1d, 0x81, 0x4f, 0x95, 0x91, 0xf9,
    0x39, 0x5c, 0x84, 0x0a, 0x9c, 0xe3, 0xd9, 0xf4, 0xd5, 0xba, 0x7d, 0x3a, 0x4b, 0x8a, 0x74, 0x9e,
]);

// Token: Smoking Chicken Fish (SCF)
pub const SCF_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xe9, 0x71, 0x33, 0x43, 0xca, 0x1a, 0xb4, 0x41, 0x5a, 0x95, 0x7a, 0x22, 0x16, 0x6f, 0xb3, 0xa0,
    0x5a, 0x91, 0x9f, 0x7f, 0x78, 0xcc, 0x6f, 0x06, 0x7e, 0xfc, 0x98, 0x3f, 0x95, 0xff, 0xe7, 0x3f,
]);

// Token: Wrapped SOL (SOL)
pub const SOL_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35,
    0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01,
]);

// Token: USD Coin (USDC)
pub const USDC_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xc6, 0xfa, 0x7a, 0xf3, 0xbe, 0xdb, 0xad, 0x3a, 0x3d, 0x65, 0xf3, 0x6a, 0xab, 0xc9, 0x74, 0x31,
    0xb1, 0xbb, 0xe4, 0xc2, 0xd2, 0xf6, 0xe0, 0xe4, 0x7c, 0xa6, 0x02, 0x03, 0x45, 0x2f, 0x5d, 0x61,
]);

// Token: USDT (USDT)
pub const USDT_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xce, 0x01, 0x0e, 0x60, 0xaf, 0xed, 0xb2, 0x27, 0x17, 0xbd, 0x63, 0x19, 0x2f, 0x54, 0x14, 0x5a,
    0x3f, 0x96, 0x5a, 0x33, 0xbb, 0x82, 0xd2, 0xc7, 0x02, 0x9e, 0xb2, 0xce, 0x1e, 0x20, 0x82, 0x64,
]);

// Token: Wrapped BTC (Portal) (WBTC)
pub const WBTC_ADDRESS: Pubkey = Pubkey::new_from_array([
    0x23, 0x3c, 0xea, 0x47, 0x4d, 0x6c, 0xb5, 0x13, 0xda, 0xd4, 0x21, 0xc8, 0x2e, 0x68, 0x1f, 0x80,
    0xed, 0x75, 0x12, 0x45, 0x5d, 0xfb, 0x91, 0xfc, 0x68, 0x36, 0x3b, 0x99, 0xd9, 0x15, 0x65, 0x82,
]);

// Token: wrapped dog (wDOG)
pub const WDOG_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xe6, 0xe5, 0x88, 0x20, 0x28, 0x4a, 0x5b, 0x87, 0x33, 0x52, 0x3e, 0x4d, 0xf2, 0xea, 0x77, 0x9b,
    0x1b, 0x29, 0xe7, 0x25, 0xec, 0x01, 0x26, 0xa4, 0x31, 0xf4, 0xdd, 0xb9, 0xb4, 0x8e, 0x1f, 0xdf,
]);

// Token: dogwifhat ($WIF)
pub const WIF_ADDRESS: Pubkey = Pubkey::new_from_array([
    0xc5, 0xf9, 0xfb, 0x32, 0xf4, 0x91, 0x11, 0xab, 0x20, 0xc3, 0x3f, 0x25, 0x98, 0xfc, 0x83, 0x6c,
    0x11, 0x3e, 0x29, 0x18, 0x81, 0xac, 0x21, 0xee, 0x29, 0x16, 0x93, 0x94, 0x01, 0x12, 0x44, 0xe4,
]);

impl From<TokenSymbol> for Pubkey {
    fn from(value: TokenSymbol) -> Self {
        match value {
            TokenSymbol::BONK => BONK_ADDRESS,
            TokenSymbol::BSOL => BSOL_ADDRESS,
            TokenSymbol::ETH => ETH_ADDRESS,
            TokenSymbol::FWOG => FWOG_ADDRESS,
            TokenSymbol::GME => GME_ADDRESS,
            TokenSymbol::JITOSOL => JITOSOL_ADDRESS,
            TokenSymbol::JLP => JLP_ADDRESS,
            TokenSymbol::JUP => JUP_ADDRESS,
            TokenSymbol::JUPSOL => JUPSOL_ADDRESS,
            TokenSymbol::MSOL => MSOL_ADDRESS,
            TokenSymbol::ORE => ORE_ADDRESS,
            TokenSymbol::PEPE => PEPE_ADDRESS,
            TokenSymbol::POPCAT => POPCAT_ADDRESS,
            TokenSymbol::PYUSD => PYUSD_ADDRESS,
            TokenSymbol::SCF => SCF_ADDRESS,
            TokenSymbol::SOL => SOL_ADDRESS,
            TokenSymbol::USDC => USDC_ADDRESS,
            TokenSymbol::USDT => USDT_ADDRESS,
            TokenSymbol::WBTC => WBTC_ADDRESS,
            TokenSymbol::WDOG => WDOG_ADDRESS,
            TokenSymbol::WIF => WIF_ADDRESS,
            TokenSymbol::Other(pk) => pk,
        }
    }
}

pub enum TokenSymbolDev {
    SOL,
    USDC,
    Other(Pubkey),
}

// Token: WSOL (SOL)
pub const SOL_ADDRESS_DEV: Pubkey = Pubkey::new_from_array([
    0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35,
    0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01,
]);

// Token: DEV USDC (USDC)
pub const USDC_ADDRESS_DEV: Pubkey = Pubkey::new_from_array([
    0x3b, 0x44, 0x2c, 0xb3, 0x91, 0x21, 0x57, 0xf1, 0x3a, 0x93, 0x3d, 0x01, 0x34, 0x28, 0x2d, 0x03,
    0x2b, 0x5f, 0xfe, 0xcd, 0x01, 0xa2, 0xdb, 0xf1, 0xb7, 0x79, 0x06, 0x08, 0xdf, 0x00, 0x2e, 0xa7,
]);

impl From<TokenSymbolDev> for Pubkey {
    fn from(value: TokenSymbolDev) -> Self {
        match value {
            TokenSymbolDev::SOL => SOL_ADDRESS_DEV,
            TokenSymbolDev::USDC => USDC_ADDRESS_DEV,
            TokenSymbolDev::Other(pk) => pk,
        }
    }
}
